/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/testsuites": {
    /**
     * Get testsuites
     * @description get testsuites
     */
    get: operations["getTestSuites"];
    /**
     * Create new TestSuite
     * @description Create new TestSuite
     */
    post: operations["createTestSuite"];
  };
  "/testsuites/{testSuiteId}": {
    /**
     * get TestSuite
     * @description get TestSuite
     */
    get: operations["getTestSuite"];
    /**
     * update TestSuite
     * @description update TestSuite action
     */
    put: operations["updateTestSuite"];
    /**
     * delete a TestSuite
     * @description delete a TestSuite
     */
    delete: operations["deleteTestSuite"];
  };
  "/testsuites/{testSuiteId}/version/{version}": {
    /**
     * get a TestSuite specific version
     * @description get a TestSuite specific version
     */
    get: operations["getTestSuiteVersion"];
  };
  "/testsuites/{testSuiteId}/run": {
    /**
     * Get all runs from a particular TestSuite
     * @description Get all runs from a particular TestSuite
     */
    get: operations["getTestSuiteRuns"];
    /**
     * run TestSuite
     * @description run a particular TestSuite
     */
    post: operations["runTestSuite"];
  };
  "/testsuites/{testSuiteId}/run/{runId}": {
    /**
     * Get a specific run from a particular TestSuite
     * @description Get a specific run from a particular TestSuite
     */
    get: operations["getTestSuiteRun"];
    /**
     * Delete a specific run from a particular TestSuite
     * @description Delete a specific run from a particular TestSuite
     */
    delete: operations["deleteTestSuiteRun"];
  };
  "/tests": {
    /**
     * Get tests
     * @description get tests
     */
    get: operations["getTests"];
    /**
     * Create new test
     * @description Create new test action
     */
    post: operations["createTest"];
  };
  "/tests/{testId}": {
    /**
     * get test
     * @description get test
     */
    get: {
      parameters: {
        path: {
          testId: external["parameters.yaml"]["components"]["parameters"]["testId"];
        };
      };
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": external["tests.yaml"]["components"]["schemas"]["TestResource"];
          };
        };
        /** @description problem with getting a test */
        500: {
          content: never;
        };
      };
    };
    /**
     * update test
     * @description update test action
     */
    put: operations["updateTest"];
    /**
     * delete a test
     * @description delete a test
     */
    delete: operations["deleteTest"];
  };
  "/tests/{testId}/run": {
    /**
     * get the runs for a test
     * @description get the runs from a particular test
     */
    get: operations["getTestRuns"];
    /**
     * run test
     * @description run a particular test
     */
    post: operations["runTest"];
  };
  "/tests/{testId}/run/{runId}/select": {
    /**
     * retrieve spans that will be selected by selector
     * @description get the spans ids that would be selected by a specific selector query
     */
    get: operations["getTestResultSelectedSpans"];
  };
  "/tests/{testId}/run/{runId}/dry-run": {
    /**
     * run given assertions against the traces from the given run without persisting anything
     * @description use this method to test a definition against an actual trace without creating a new version or persisting anything
     */
    put: operations["dryRunAssertion"];
  };
  "/tests/{testId}/run/{runId}/rerun": {
    /**
     * rerun a test run
     * @description rerun a test run
     */
    post: operations["rerunTestRun"];
  };
  "/tests/{testId}/run/{runId}/junit.xml": {
    /**
     * get test run results in JUnit xml format
     * @description get test run results in JUnit xml format
     */
    get: operations["getRunResultJUnit"];
  };
  "/tests/{testId}/run/{runId}/export": {
    /**
     * export test and test run information
     * @description export test and test run information for debugging
     */
    get: operations["exportTestRun"];
  };
  "/tests/import": {
    /**
     * import test and test run information
     * @description import test and test run information for debugging
     */
    post: operations["importTestRun"];
  };
  "/tests/{testId}/run/{runId}": {
    /**
     * get test Run
     * @description get a particular test Run
     */
    get: operations["getTestRun"];
    /**
     * delete a test run
     * @description delete a test run
     */
    delete: operations["deleteTestRun"];
  };
  "/tests/{testId}/definition": {
    /**
     * Get definition for a test
     * @description Gets definition for a test
     */
    get: operations["getTestSpecs"];
  };
  "/tests/{testId}/version/{version}": {
    /**
     * get a test specific version
     * @description get a test specific version
     */
    get: operations["getTestVersion"];
  };
  "/tests/{testId}/run/{runId}/stop": {
    /**
     * stops the execution of a test run
     * @description stops the execution of a test run
     */
    post: operations["stopTestRun"];
  };
  "/tests/{testId}/run/{runId}/events": {
    /**
     * get events from a test run
     * @description get events from a test run
     */
    get: operations["getTestRunEvents"];
  };
  "/expressions/resolve": {
    /**
     * resolves an expression and returns the result string
     * @description resolves an expression and returns the result string
     */
    post: operations["ExpressionResolve"];
  };
  "/resources": {
    /**
     * Get resources
     * @description get resources
     */
    get: operations["getResources"];
  };
  "/config/connection": {
    /**
     * Tests the config data store/exporter connection
     * @description Tests the config data store/exporter connection
     */
    post: operations["testConnection"];
  };
  "/configs": {
    /**
     * List Tracetest configuration
     * @description List Tracetest configuration
     */
    get: operations["listConfiguration"];
  };
  "/configs/{configId}": {
    /**
     * Get Tracetest configuration
     * @description Get Tracetest configuration
     */
    get: operations["getConfiguration"];
    /**
     * Update Tracetest configuration
     * @description Update Tracetest configuration
     */
    put: operations["updateConfiguration"];
  };
  "/pollingprofiles": {
    /**
     * List Polling Profile Configuration
     * @description List Polling Profile configuration
     */
    get: operations["listPollingProfile"];
  };
  "/pollingprofiles/{pollingProfileId}": {
    /**
     * Get Polling Profile
     * @description Get a polling profile used on Tracetest to configure how to fetch traces in a test.
     */
    get: operations["getPollingProfile"];
    /**
     * Update a Polling Profile
     * @description Update a polling profile used on Tracetest to configure how to fetch traces in a test.
     */
    put: operations["updatePollingProfile"];
  };
  "/demos": {
    /**
     * List Demonstrations
     * @description List demonstrations used on Tracetest as quick start examples.
     */
    get: operations["listDemos"];
    /**
     * Create a Demonstration setting
     * @description Create a demonstration used on Tracetest as quick start examples.
     */
    post: operations["createDemo"];
  };
  "/demos/{demoId}": {
    /**
     * Get Demonstration setting
     * @description Get a demonstration used on Tracetest as quick start examples.
     */
    get: operations["getDemo"];
    /**
     * Update a Demonstration setting
     * @description Update a demonstration used on Tracetest as quick start examples.
     */
    put: operations["updateDemo"];
    /**
     * Delete a Demonstration setting
     * @description Delete a demonstration used on Tracetest as quick start examples.
     */
    delete: operations["deleteDemo"];
  };
  "/datastores": {
    /**
     * List Data Store
     * @description List Data Store
     */
    get: operations["listDataStore"];
  };
  "/datastores/{dataStoreId}": {
    /**
     * Get a Data Store
     * @description Get a Data Store
     */
    get: operations["getDataStore"];
    /**
     * Update a Data Store
     * @description Update a Data Store
     */
    put: operations["updateDataStore"];
    /**
     * Delete a Data Store
     * @description Delete a Data Store
     */
    delete: operations["deleteDataStore"];
  };
  "/variableSets": {
    /**
     * List VariableSets
     * @description List VariableSets available in Tracetest.
     */
    get: operations["listVariableSets"];
    /**
     * Create a VariableSet
     * @description Create a VariableSet that can be used by tests and test suites
     */
    post: operations["createVariableSet"];
  };
  "/variableSets/{variableSetId}": {
    /**
     * Get a specific VariableSet
     * @description Get one VariableSet by its id
     */
    get: operations["getVariableSet"];
    /**
     * Update a VariableSet
     * @description Update a VariableSet used on Tracetest
     */
    put: operations["updateVariableSet"];
    /**
     * Delete a variable set
     * @description Delete a variable set from Tracetest
     */
    delete: operations["deleteVariableSet"];
  };
  "/version": {
    /**
     * Get the version of the API
     * @description Get the version of the API
     */
    get: operations["getVersion"];
  };
  "/linters": {
    /**
     * List Linters
     * @description List Linters available in Tracetest.
     */
    get: operations["listLinters"];
    /**
     * Create an Linter
     * @description Create an Linter that can be used by tests and Linters
     */
    post: operations["createLinter"];
  };
  "/linters/{LinterId}": {
    /**
     * Get a specific Linter
     * @description Get one Linter by its id
     */
    get: operations["getLinter"];
    /**
     * Update a Linter
     * @description Update a Linter used on Tracetest
     */
    put: operations["updateLinter"];
    /**
     * Delete an Linter
     * @description Delete an Linter from Tracetest
     */
    delete: operations["deleteLinter"];
  };
}

export type webhooks = Record<string, never>;

export type components = Record<string, never>;

export type $defs = Record<string, never>;

export interface external {
  "config.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        TestConnectionResponse: {
          successful?: boolean;
          steps?: external["config.yaml"]["components"]["schemas"]["ConnectionResult"][];
        };
        ConnectionResult: {
          portCheck?: external["config.yaml"]["components"]["schemas"]["ConnectionTestStep"];
          connectivity?: external["config.yaml"]["components"]["schemas"]["ConnectionTestStep"];
          authentication?: external["config.yaml"]["components"]["schemas"]["ConnectionTestStep"];
          fetchTraces?: external["config.yaml"]["components"]["schemas"]["ConnectionTestStep"];
        };
        ConnectionTestStep: {
          passed?: boolean;
          /** @enum {string} */
          status?: "passed" | "warning" | "failed";
          message?: string;
          error?: string;
        };
        ConfigurationResourceList: {
          count?: number;
          items?: external["config.yaml"]["components"]["schemas"]["ConfigurationResource"][];
        };
        /** @description Represents a configuration structured into the Resources format. */
        ConfigurationResource: {
          /**
           * @description Represents the type of this resource. It should always be set as 'Config'.
           * @enum {string}
           */
          type?: "Config";
          /** @description Represents the set of configuration common options for Tracetest. */
          spec?: {
            /**
             * @description ID of the configuration resource. It should always be set as 'current'.
             * @enum {string}
             */
            id?: "current";
            /**
             * @description Name given for this configuration set. It should always be set as 'Config'.
             * @enum {string}
             */
            name?: "Config";
            /** @description Flag telling if a user allow Tracetest to send analytics about its usage. */
            analyticsEnabled: boolean;
          };
        };
        PollingProfileList: {
          count?: number;
          items?: external["config.yaml"]["components"]["schemas"]["PollingProfile"][];
        };
        /** @description Represents a polling profile structured into the Resources format. */
        PollingProfile: {
          /**
           * @description Represents the type of this resource. It should always be set as 'PollingProfile'.
           * @enum {string}
           */
          type?: "PollingProfile";
          /** @description Represents the attributes of a Polling Profile. */
          spec?: {
            /** @description ID of this Polling Profile. */
            id: string;
            /** @description Name given for this profile. */
            name: string;
            /** @description Is default polling profile */
            default?: boolean;
            /**
             * @description Name of the strategy that will be used on this profile.
             * @enum {string}
             */
            strategy: "periodic";
            /** @description Configuration for the strategy 'periodic'. It only should be filled if the field strategy is equals to 'periodic'. */
            periodic?: {
              /** @description Time that the poller should wait until try to fetch more traces. It should be written in duration format (example: 1s, 30s, 1m). */
              retryDelay?: string;
              /** @description Total time that the poller should try to continue to fetch traces. It should be written in duration format (example: 1s, 30s, 1m). */
              timeout?: string;
            };
          };
        };
        /** @description Represents the settings of the Pokeshop API demonstration. */
        DemoPokeshop: {
          /** @description HTTP endpoint for Pokeshop API */
          httpEndpoint?: string;
          /** @description gRPC endpoint for Pokeshop API */
          grpcEndpoint?: string;
          /** @description kafka broker for Pokeshop API */
          kafkaBroker?: string;
        };
        /** @description Represents the settings of the Open Telemetry Store demonstration. */
        DemoOpenTelemetryStore: {
          /** @description Address of the root URL for the Frontend microservice on Open Telemetry Store. */
          frontendEndpoint?: string;
          /** @description Address of the root URL for the Product Catalog microservice on Open Telemetry Store. */
          productCatalogEndpoint?: string;
          /** @description Address of the root URL for the Cart microservice on Open Telemetry Store. */
          cartEndpoint?: string;
          /** @description Address of the root URL for the Checkout microservice on Open Telemetry Store. */
          checkoutEndpoint?: string;
        };
        /** @description Represents a demonstration API structured into the Resources format. */
        Demo: {
          /**
           * @description Represents the type of this resource. It should always be set as 'Demo'.
           * @enum {string}
           */
          type?: "Demo";
          /** @description Represents the attributes of a Demonstration API. */
          spec?: {
            id?: string;
            /**
             * @description String defining that this demo is a Open Telemetry Store demo.
             * @enum {string}
             */
            type?: "otelstore" | "pokeshop";
            /** @description Name of the demo */
            name?: string;
            /** @description Flag telling if this API is enabled on Tracetest. */
            enabled: boolean;
            pokeshop?: external["config.yaml"]["components"]["schemas"]["DemoPokeshop"];
            opentelemetryStore?: external["config.yaml"]["components"]["schemas"]["DemoOpenTelemetryStore"];
          };
        };
        DemoList: {
          count?: number;
          items?: external["config.yaml"]["components"]["schemas"]["Demo"][];
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "dataStores.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        DataStoreList: {
          count?: number;
          items?: external["dataStores.yaml"]["components"]["schemas"]["DataStoreResource"][];
        };
        /** @description Represents a data store structured into the Resources format. */
        DataStoreResource: {
          /**
           * @description Represents the type of this resource. It should always be set as 'DataStore'.
           * @enum {string}
           */
          type?: "DataStore";
          spec?: external["dataStores.yaml"]["components"]["schemas"]["DataStore"];
        };
        DataStore: {
          id?: string;
          name: string;
          type: external["dataStores.yaml"]["components"]["schemas"]["SupportedDataStores"];
          default?: boolean;
          jaeger?: external["dataStores.yaml"]["components"]["schemas"]["GRPCClientSettings"];
          tempo?: external["dataStores.yaml"]["components"]["schemas"]["BaseClient"];
          opensearch?: external["dataStores.yaml"]["components"]["schemas"]["ElasticSearch"];
          elasticapm?: external["dataStores.yaml"]["components"]["schemas"]["ElasticSearch"];
          signalfx?: external["dataStores.yaml"]["components"]["schemas"]["SignalFX"];
          awsxray?: external["dataStores.yaml"]["components"]["schemas"]["AwsXRay"];
          azureappinsights?: external["dataStores.yaml"]["components"]["schemas"]["AzureAppInsights"];
          /** Format: date-time */
          createdAt?: string;
        };
        BaseClient: {
          type?: external["dataStores.yaml"]["components"]["schemas"]["SupportedClients"];
          http?: external["dataStores.yaml"]["components"]["schemas"]["HTTPClientSettings"];
          grpc?: external["dataStores.yaml"]["components"]["schemas"]["GRPCClientSettings"];
        };
        ElasticSearch: {
          addresses?: string[];
          username?: string;
          password?: string;
          index?: string;
          certificate?: string;
          insecureSkipVerify?: boolean;
        };
        SignalFX: {
          realm?: string;
          token?: string;
        };
        AzureAppInsights: {
          useAzureActiveDirectoryAuth?: boolean;
          accessToken?: string;
          connectionType?: external["dataStores.yaml"]["components"]["schemas"]["SupportedConnectionTypes"];
          resourceArmId?: string;
        };
        AwsXRay: {
          region?: string;
          accessKeyId?: string;
          secretAccessKey?: string;
          sessionToken?: string;
          useDefaultAuth?: boolean;
        };
        HTTPClientSettings: {
          url?: string;
          headers?: {
            [key: string]: string;
          };
          tls?: external["dataStores.yaml"]["components"]["schemas"]["TLS"];
          auth?: external["http.yaml"]["components"]["schemas"]["HTTPAuth"];
        };
        GRPCClientSettings: {
          endpoint?: string;
          readBufferSize?: number;
          writeBufferSize?: number;
          waitForReady?: boolean;
          headers?: {
            [key: string]: string;
          };
          balancerName?: string;
          /** @enum {string} */
          compression?: "gzip" | "zlib" | "deflate" | "snappy" | "zstd" | "none" | "";
          tls?: external["dataStores.yaml"]["components"]["schemas"]["TLS"];
          auth?: external["http.yaml"]["components"]["schemas"]["HTTPAuth"];
        };
        TLS: {
          insecure?: boolean;
          insecureSkipVerify?: boolean;
          serverName?: string;
          settings?: external["dataStores.yaml"]["components"]["schemas"]["TLSSetting"];
        };
        TLSSetting: {
          cAFile?: string;
          certFile?: string;
          keyFile?: string;
          minVersion?: string;
          maxVersion?: string;
        };
        /** @enum {string} */
        SupportedDataStores: "jaeger" | "opensearch" | "tempo" | "signalfx" | "otlp" | "elasticapm" | "newrelic" | "lightstep" | "datadog" | "awsxray" | "honeycomb" | "azureappinsights" | "signoz" | "dynatrace";
        /** @enum {string} */
        SupportedClients: "http" | "grpc";
        /** @enum {string} */
        SupportedConnectionTypes: "direct" | "collector";
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "expressions.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        ResolveRequestInfo: {
          expression?: string;
          context?: external["expressions.yaml"]["components"]["schemas"]["ResolveContext"];
        };
        ResolveContext: {
          testId?: string;
          runId?: string;
          spanId?: string;
          selector?: string;
          variableSetId?: string;
        };
        ResolveResponseInfo: {
          resolvedValues?: string[];
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "grpc.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        GRPCHeader: {
          key?: string;
          value?: string;
        };
        GRPCRequest: {
          protobufFile?: string;
          address?: string;
          service?: string;
          method?: string;
          metadata?: external["grpc.yaml"]["components"]["schemas"]["GRPCHeader"][];
          auth?: external["http.yaml"]["components"]["schemas"]["HTTPAuth"];
          request?: string;
        };
        GRPCResponse: {
          /** @default 0 */
          statusCode: number;
          metadata?: external["grpc.yaml"]["components"]["schemas"]["GRPCHeader"][];
          body?: string;
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "http.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        HTTPHeader: {
          key?: string;
          value?: string;
        };
        HTTPRequest: {
          url?: string;
          /** @enum {string} */
          method?: "GET" | "PUT" | "POST" | "PATCH" | "DELETE" | "COPY" | "HEAD" | "OPTIONS" | "LINK" | "UNLINK" | "PURGE" | "LOCK" | "UNLOCK" | "PROPFIND" | "VIEW";
          headers?: external["http.yaml"]["components"]["schemas"]["HTTPHeader"][];
          body?: string;
          auth?: external["http.yaml"]["components"]["schemas"]["HTTPAuth"];
          /** @default false */
          sslVerification?: boolean;
        };
        HTTPResponse: {
          status?: string;
          statusCode?: number;
          headers?: external["http.yaml"]["components"]["schemas"]["HTTPHeader"][];
          body?: string;
        };
        HTTPAuth: {
          /** @enum {string} */
          type?: "apiKey" | "basic" | "bearer";
          apiKey?: {
            key?: string;
            value?: string;
            /** @enum {string} */
            in?: "query" | "header";
          };
          basic?: {
            username?: string;
            password?: string;
          };
          bearer?: {
            token?: string;
          };
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "kafka.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        KafkaRequest: {
          brokerUrls?: string[];
          topic?: string;
          authentication?: external["kafka.yaml"]["components"]["schemas"]["KafkaAuthentication"];
          /** @default false */
          sslVerification?: boolean;
          headers?: external["kafka.yaml"]["components"]["schemas"]["KafkaMessageHeader"][];
          messageKey?: string;
          messageValue?: string;
        };
        KafkaResponse: {
          partition?: string;
          offset?: string;
        };
        KafkaMessageHeader: {
          key?: string;
          value?: string;
        };
        KafkaAuthentication: {
          /** @enum {string} */
          type?: "plain";
          plain?: {
            username?: string;
            password?: string;
          };
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "linters.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        LinterResourceList: {
          items?: external["linters.yaml"]["components"]["schemas"]["LinterResource"][];
        };
        LinterResource: {
          /** @enum {string} */
          type?: "Linter";
          spec?: {
            id?: string;
            name?: string;
            enabled?: boolean;
            minimumScore?: number;
            plugins?: external["linters.yaml"]["components"]["schemas"]["LinterResourcePlugin"][];
          };
        };
        LinterResourcePlugin: {
          id?: string;
          name?: string;
          description?: string;
          enabled?: boolean;
          rules?: external["linters.yaml"]["components"]["schemas"]["LinterResourceRule"][];
        };
        LinterResourceRule: {
          id?: string;
          weight?: number;
          name?: string;
          description?: string;
          errorDescription?: string;
          tips?: readonly string[];
          /** @enum {string} */
          errorLevel?: "error" | "warning" | "disabled";
        };
        LinterResult: {
          minimumScore?: number;
          passed?: boolean;
          score?: number;
          plugins?: external["linters.yaml"]["components"]["schemas"]["LinterResultPlugin"][];
        };
        LinterResultPlugin: {
          name?: string;
          description?: string;
          passed?: boolean;
          score?: number;
          rules?: external["linters.yaml"]["components"]["schemas"]["LinterResultPluginRule"][];
        };
        LinterResultPluginRule: {
          id?: string;
          name?: string;
          description?: string;
          errorDescription?: string;
          passed?: boolean;
          weight?: number;
          tips?: string[];
          results?: external["linters.yaml"]["components"]["schemas"]["LinterResultPluginRuleResult"][];
          /** @enum {string} */
          level?: "error" | "warning" | "disabled";
        };
        LinterResultPluginRuleResult: {
          spanId?: string;
          errors?: external["linters.yaml"]["components"]["schemas"]["LinterResultPluginRuleResultError"][];
          passed?: boolean;
          /** @enum {string} */
          severity?: "error" | "warning";
        };
        LinterResultPluginRuleResultError: {
          value?: string;
          expected?: string;
          description?: string;
          suggestions?: string[];
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "parameters.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: never;
      responses: never;
      parameters: {
        /** @description id of the test */
        testId: string;
        /** @description id of the run */
        runId: number;
        /** @description version of the test */
        version: number;
        /** @description id of the TestSuite */
        testSuiteId: string;
        /** @description indicates how many resources can be returned by each page */
        take?: number;
        /** @description indicates how many resources will be skipped when paginating */
        skip?: number;
        /** @description query to search resources */
        query?: string;
        /** @description indicates the sort field for the resources */
        runnableResourceSortBy?: "created" | "name" | "last_run";
        /** @description indicates the sort field for the resources */
        sortBy?: "created" | "name";
        /** @description indicates the sort field for the resources */
        switchableResourceSortBy?: "type" | "enabled";
        /** @description indicates the sort direction for the resources */
        sortDirection?: "asc" | "desc";
        /** @description ID of the configuration resource used on Tracetest. It should be set as 'current' */
        configId: string;
        /** @description ID of a demonstration used on Tracetest as quick start examples */
        demoId: string;
        /** @description ID of a polling profile used on Tracetest to configure how to fetch traces in a test. It should be set as 'current' */
        pollingProfileId: string;
        /** @description ID of a datastore used on Tracetest to configure how to fetch traces in a test */
        dataStoreId: string;
        /** @description ID of a VariableSet used on Tracetest to inject values into tests and TestSuites */
        variableSetId: string;
        /** @description ID of an Linter */
        LinterId: string;
      };
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "resources.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        Resource: {
          type: string;
          item: unknown;
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "testEvents.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        TestRunEvent: {
          type?: string;
          /** @enum {string} */
          stage?: "trigger" | "trace" | "test";
          title?: string;
          description?: string;
          /** Format: date-time */
          createdAt?: string;
          testId?: string;
          runId?: number;
          dataStoreConnection?: external["config.yaml"]["components"]["schemas"]["ConnectionResult"];
          polling?: external["testEvents.yaml"]["components"]["schemas"]["PollingInfo"];
          outputs?: external["testEvents.yaml"]["components"]["schemas"]["OutputInfo"][];
        };
        PollingInfo: {
          /** @enum {string} */
          type?: "periodic";
          isComplete?: boolean;
          periodic?: {
            numberSpans?: number;
            numberIterations?: number;
          };
        };
        OutputInfo: {
          /** @enum {string} */
          logLevel?: "warning" | "error";
          message?: string;
          outputName?: string;
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "testRunner.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        TestRunnerResource: {
          /**
           * @description Represents the type of this resource. It should always be set as 'TestRunner'.
           * @enum {string}
           */
          type?: "TestRunner";
          spec?: external["testRunner.yaml"]["components"]["schemas"]["TestRunner"];
        };
        TestRunner: {
          /**
           * @description ID of the test runner resource. It should always be set as 'current'.
           * @enum {string}
           */
          id?: "current";
          /** @description Name given for this test runner set */
          name?: string;
          requiredGates?: external["testRunner.yaml"]["components"]["schemas"]["SupportedGates"][];
        };
        RequiredGatesResult: {
          required: external["testRunner.yaml"]["components"]["schemas"]["SupportedGates"][];
          failed: external["testRunner.yaml"]["components"]["schemas"]["SupportedGates"][];
          passed: boolean;
        };
        /** @enum {string} */
        SupportedGates: "analyzer-score" | "analyzer-rules" | "test-specs";
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "tests.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        TestResourceList: {
          count?: number;
          items?: external["tests.yaml"]["components"]["schemas"]["TestResource"][];
        };
        /** @description Represents a test structured into the Resources format. */
        TestResource: {
          /**
           * @description Represents the type of this resource. It should always be set as 'Test'.
           * @enum {string}
           */
          type?: "Test";
          spec?: external["tests.yaml"]["components"]["schemas"]["Test"];
        };
        Test: {
          id?: string;
          name?: string;
          description?: string;
          /** @description version number of the test */
          version?: number;
          /** Format: date-time */
          createdAt?: string;
          trigger?: external["triggers.yaml"]["components"]["schemas"]["Trigger"];
          /** @description specification of assertions that are going to be made */
          specs?: external["tests.yaml"]["components"]["schemas"]["TestSpec"][];
          /**
           * @description define test outputs, in a key/value format. The value is processed as an expression
           * @example [
           *   {
           *     "name": "USER_ID",
           *     "selector": "span[name=\"user_signup\" result=\"success\"]",
           *     "value": "attr:myapp.signup.user_id"
           *   },
           *   {
           *     "name": "PROFILE_URL",
           *     "selector": "span[tracetest.span.type=\"general\" name=\"Tracetest trigger\"]",
           *     "value": "${attr:tracetest.response.body | json_path '.user.profileUrl' }"
           *   }
           * ]
           */
          outputs?: external["tests.yaml"]["components"]["schemas"]["TestOutput"][];
          /** @description summary of test data */
          summary?: external["tests.yaml"]["components"]["schemas"]["TestSummary"];
        };
        TestOutput: {
          name?: string;
          selector?: string;
          selectorParsed?: external["tests.yaml"]["components"]["schemas"]["Selector"];
          value?: string;
        };
        TestSummary: {
          runs?: number;
          lastRun?: {
            /** Format: date-time */
            readonly time?: string | null;
            readonly passes?: number;
            readonly fails?: number;
            readonly analyzerScore?: number;
          };
        };
        /**
         * @example {
         *   "specs": [
         *     {
         *       "selector": {
         *         "query": "span[tracetest.span.type=\"http\"]",
         *         "structure": [
         *           {
         *             "filters": [
         *               {
         *                 "property": "tracetest.span.type",
         *                 "operator": "=",
         *                 "value": "http"
         *               }
         *             ]
         *           }
         *         ]
         *       },
         *       "assertions": [
         *         {
         *           "attribute": "tracetest.span.duration",
         *           "comparator": "<",
         *           "expected": "2000"
         *         },
         *         {
         *           "attribute": "http.status_code",
         *           "comparator": "=",
         *           "expected": "200"
         *         }
         *       ]
         *     }
         *   ]
         * }
         */
        TestSpecs: {
          specs?: external["tests.yaml"]["components"]["schemas"]["TestSpec"][];
        };
        TestSpec: {
          name?: string;
          selector?: string;
          selectorParsed?: external["tests.yaml"]["components"]["schemas"]["Selector"];
          assertions?: string[];
        };
        TestRun: {
          id?: string;
          traceId?: string;
          spanId?: string;
          /** @description Test version used when running this test run */
          testVersion?: number;
          /**
           * @description Current execution state
           * @enum {string}
           */
          state?: "CREATED" | "EXECUTING" | "AWAITING_TRACE" | "AWAITING_TEST_RESULTS" | "ANALYZING_TRACE" | "ANALYZING_ERROR" | "FINISHED" | "STOPPED" | "TRIGGER_FAILED" | "TRACE_FAILED" | "ASSERTION_FAILED";
          /** @description Details of the cause for the last `FAILED` state */
          lastErrorState?: string;
          /** @description time in seconds it took for the test to complete, either success or fail. If the test is still running, it will show the time up to the time of the request */
          executionTime?: number;
          /** @description time in milliseconds it took for the triggering testSuite to complete, either success or fail. If the test is still running, it will show the time up to the time of the request */
          triggerTime?: number;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          serviceTriggeredAt?: string;
          /** Format: date-time */
          serviceTriggerCompletedAt?: string;
          /** Format: date-time */
          obtainedTraceAt?: string;
          /** Format: date-time */
          completedAt?: string;
          variableSet?: external["variableSets.yaml"]["components"]["schemas"]["VariableSet"];
          triggerResult?: external["triggers.yaml"]["components"]["schemas"]["TriggerResult"];
          trace?: external["trace.yaml"]["components"]["schemas"]["Trace"];
          result?: external["tests.yaml"]["components"]["schemas"]["AssertionResults"];
          linter?: external["linters.yaml"]["components"]["schemas"]["LinterResult"];
          outputs?: {
              name?: string;
              spanId?: string;
              value?: string;
              error?: string;
            }[];
          requiredGatesResult?: external["testRunner.yaml"]["components"]["schemas"]["RequiredGatesResult"];
          metadata?: {
            [key: string]: string;
          };
          testSuiteId?: string;
          testSuiteRunId?: string;
        };
        RunInformation: {
          metadata?: {
            [key: string]: string;
          } | null;
          variableSetId?: string;
          variables?: external["variableSets.yaml"]["components"]["schemas"]["VariableSetValue"][];
          requiredGates?: external["testRunner.yaml"]["components"]["schemas"]["SupportedGates"][] | null;
        };
        /**
         * @example {
         *   "allPassed": true,
         *   "results": [
         *     {
         *       "selector": {
         *         "query": "span[tracetest.span.type=\"http\"]",
         *         "structure": [
         *           {
         *             "filters": [
         *               {
         *                 "property": "tracetest.span.type",
         *                 "operator": "=",
         *                 "value": "http"
         *               }
         *             ]
         *           }
         *         ]
         *       },
         *       "results": [
         *         {
         *           "assertion": {
         *             "attribute": "http.status_code",
         *             "comparator": "=",
         *             "expected": "200"
         *           },
         *           "allPassed": true,
         *           "spanResults": [
         *             {
         *               "spanId": "123",
         *               "observedValue": "test",
         *               "passed": true
         *             }
         *           ]
         *         },
         *         {
         *           "assertion": {
         *             "attribute": "http.status_code",
         *             "comparator": "=",
         *             "expected": "200"
         *           },
         *           "allPassed": true,
         *           "spanResults": [
         *             {
         *               "spanId": "123",
         *               "observedValue": "test",
         *               "passed": true
         *             }
         *           ]
         *         }
         *       ]
         *     }
         *   ]
         * }
         */
        AssertionResults: {
          allPassed?: boolean;
          results?: {
              selector?: external["tests.yaml"]["components"]["schemas"]["Selector"];
              results?: external["tests.yaml"]["components"]["schemas"]["AssertionResult"][];
            }[];
        };
        AssertionResult: {
          assertion?: string;
          allPassed?: boolean;
          spanResults?: external["tests.yaml"]["components"]["schemas"]["AssertionSpanResult"][];
        };
        AssertionSpanResult: {
          spanId?: string;
          observedValue?: string;
          passed?: boolean;
          error?: string;
        };
        DefinitionFile: {
          content?: string;
        };
        SelectedSpansResult: {
          selector?: external["tests.yaml"]["components"]["schemas"]["Selector"];
          spanIds?: string[];
        };
        Selector: {
          query?: string;
          structure?: external["tests.yaml"]["components"]["schemas"]["SpanSelector"][];
        };
        SpanSelector: {
          filters: external["tests.yaml"]["components"]["schemas"]["SelectorFilter"][];
          pseudoClass?: external["tests.yaml"]["components"]["schemas"]["SelectorPseudoClass"];
          childSelector?: external["tests.yaml"]["components"]["schemas"]["SpanSelector"];
        } | null;
        SelectorFilter: {
          property: string;
          operator: string;
          value: string;
        };
        SelectorPseudoClass: {
          name: string;
          argument?: number;
        } | null;
        ExportedTestInformation: {
          test: external["tests.yaml"]["components"]["schemas"]["Test"];
          run: external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "testsuites.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        TestSuiteResourceList: {
          count?: number;
          items?: external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"][];
        };
        /** @description Represents a TestSuite structured into the Resources format. */
        TestSuiteResource: {
          /**
           * @description Represents the type of this resource. It should always be set as 'TestSuite'.
           * @enum {string}
           */
          type?: "TestSuite";
          spec?: external["testsuites.yaml"]["components"]["schemas"]["TestSuite"];
        };
        TestSuite: {
          id?: string;
          name?: string;
          description?: string;
          /** @description version number of the test */
          version?: number;
          /** @description list of steps of the TestSuite containing just each test id */
          steps?: string[];
          /** @description list of steps of the TestSuite containing the whole test object */
          fullSteps?: external["tests.yaml"]["components"]["schemas"]["Test"][];
          /** Format: date-time */
          createdAt?: string;
          /** @description summary of TestSuite */
          summary?: external["tests.yaml"]["components"]["schemas"]["TestSummary"];
        };
        TestSuiteRun: {
          id?: string;
          version?: number;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          completedAt?: string;
          /** @enum {string} */
          state?: "CREATED" | "EXECUTING" | "FINISHED" | "FAILED";
          steps?: external["tests.yaml"]["components"]["schemas"]["TestRun"][];
          variableSet?: external["variableSets.yaml"]["components"]["schemas"]["VariableSet"];
          metadata?: {
            [key: string]: string;
          };
          pass?: number;
          fail?: number;
          allStepsRequiredGatesPassed?: boolean;
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "trace.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        Trace: {
          traceId?: string;
          tree?: external["trace.yaml"]["components"]["schemas"]["Span"];
          /** @description falttened version, mapped as spanId -> span{} */
          flat?: {
            [key: string]: external["trace.yaml"]["components"]["schemas"]["Span"];
          };
        };
        Span: {
          id?: string;
          parentId?: string;
          name?: string;
          kind?: string;
          /**
           * Format: int64
           * @description span start time in unix milli format
           * @example 1656701595277
           */
          startTime?: number;
          /**
           * Format: int64
           * @description span end time in unix milli format
           * @example 1656701595800
           */
          endTime?: number;
          /**
           * @description Key-Value of span attributes
           * @example {
           *   "span.name": "POST /create",
           *   "tracetest.span.type": "http",
           *   "tracetest.span.duration": "2000"
           * }
           */
          attributes?: {
            [key: string]: string;
          };
          children?: external["trace.yaml"]["components"]["schemas"]["Span"][];
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "traceid.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        TRACEIDRequest: {
          id?: string;
        };
        TRACEIDResponse: {
          id?: string;
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "triggers.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        Trigger: {
          /** @enum {string} */
          type?: "http" | "grpc" | "traceid" | "kafka";
          httpRequest?: external["http.yaml"]["components"]["schemas"]["HTTPRequest"];
          grpc?: external["grpc.yaml"]["components"]["schemas"]["GRPCRequest"];
          traceid?: external["traceid.yaml"]["components"]["schemas"]["TRACEIDRequest"];
          kafka?: external["kafka.yaml"]["components"]["schemas"]["KafkaRequest"];
        };
        TriggerResult: {
          /** @enum {string} */
          type?: "http" | "grpc" | "traceid" | "kafka";
          triggerResult?: {
            http?: external["http.yaml"]["components"]["schemas"]["HTTPResponse"];
            grpc?: external["grpc.yaml"]["components"]["schemas"]["GRPCResponse"];
            traceid?: external["traceid.yaml"]["components"]["schemas"]["TRACEIDResponse"];
            kafka?: external["kafka.yaml"]["components"]["schemas"]["KafkaResponse"];
          };
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "variables.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        MissingVariablesError: {
          missingVariables?: external["variables.yaml"]["components"]["schemas"]["MissingVariable"][];
        };
        MissingVariable: {
          testId?: string;
          variables?: external["variables.yaml"]["components"]["schemas"]["Variable"][];
        };
        Variable: {
          key?: string;
          defaultValue?: string;
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "variableSets.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        VariableSetResourceList: {
          count?: number;
          items?: external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"][];
        };
        /** @description Represents a VariableSet structured into the Resources format. */
        VariableSetResource: {
          /**
           * @description Represents the type of this resource. It should always be set as 'VariableSet'.
           * @enum {string}
           */
          type?: "VariableSet";
          spec?: external["variableSets.yaml"]["components"]["schemas"]["VariableSet"];
        };
        VariableSet: {
          id?: string;
          name?: string;
          description?: string;
          values?: external["variableSets.yaml"]["components"]["schemas"]["VariableSetValue"][];
        };
        VariableSetValue: {
          key?: string;
          value?: string;
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "version.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        Version: {
          /** @example 1.0.0 */
          version?: string;
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
}

export interface operations {

  /**
   * Get testsuites
   * @description get testsuites
   */
  getTestSuites: {
    parameters: {
      query?: {
        take?: external["parameters.yaml"]["components"]["parameters"]["take"];
        skip?: external["parameters.yaml"]["components"]["parameters"]["skip"];
        query?: external["parameters.yaml"]["components"]["parameters"]["query"];
        sortBy?: external["parameters.yaml"]["components"]["parameters"]["runnableResourceSortBy"];
        sortDirection?: external["parameters.yaml"]["components"]["parameters"]["sortDirection"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResourceList"];
          "text/yaml": {
            count?: number;
            items?: external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"][];
          };
        };
      };
      /** @description invalid query for testsuites, some data was sent in incorrect format. */
      400: {
        content: never;
      };
      /** @description problem with getting testsuites */
      500: {
        content: never;
      };
    };
  };
  /**
   * Create new TestSuite
   * @description Create new TestSuite
   */
  createTestSuite: {
    requestBody?: {
      content: {
        "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
        "text/yaml": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
      };
    };
    responses: {
      /** @description successful operation */
      201: {
        content: {
          "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
          "text/yaml": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
        };
      };
      /** @description trying to create a TestSuite with an already existing ID */
      400: {
        content: never;
      };
      /** @description problem creating a TestSuite */
      500: {
        content: never;
      };
    };
  };
  /**
   * get TestSuite
   * @description get TestSuite
   */
  getTestSuite: {
    parameters: {
      path: {
        testSuiteId: external["parameters.yaml"]["components"]["parameters"]["testSuiteId"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
          "text/yaml": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
        };
      };
      /** @description TestSuite not found */
      404: {
        content: never;
      };
      /** @description problem getting an TestSuite */
      500: {
        content: never;
      };
    };
  };
  /**
   * update TestSuite
   * @description update TestSuite action
   */
  updateTestSuite: {
    parameters: {
      path: {
        testSuiteId: external["parameters.yaml"]["components"]["parameters"]["testSuiteId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
        "text/yaml": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
          "text/yaml": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
        };
      };
      /** @description invalid TestSuite, some data was sent in incorrect format. */
      400: {
        content: never;
      };
      /** @description TestSuite not found */
      404: {
        content: never;
      };
      /** @description problem updating a TestSuite */
      500: {
        content: never;
      };
    };
  };
  /**
   * delete a TestSuite
   * @description delete a TestSuite
   */
  deleteTestSuite: {
    parameters: {
      path: {
        testSuiteId: external["parameters.yaml"]["components"]["parameters"]["testSuiteId"];
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        content: never;
      };
      /** @description TestSuite not found */
      404: {
        content: never;
      };
      /** @description problem deleting a TestSuite */
      500: {
        content: never;
      };
    };
  };
  /**
   * get a TestSuite specific version
   * @description get a TestSuite specific version
   */
  getTestSuiteVersion: {
    parameters: {
      path: {
        testSuiteId: external["parameters.yaml"]["components"]["parameters"]["testSuiteId"];
        version: external["parameters.yaml"]["components"]["parameters"]["version"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuite"];
        };
      };
      /** @description problem with getting a test */
      500: {
        content: never;
      };
    };
  };
  /**
   * Get all runs from a particular TestSuite
   * @description Get all runs from a particular TestSuite
   */
  getTestSuiteRuns: {
    parameters: {
      query?: {
        take?: external["parameters.yaml"]["components"]["parameters"]["take"];
        skip?: external["parameters.yaml"]["components"]["parameters"]["skip"];
      };
      path: {
        testSuiteId: external["parameters.yaml"]["components"]["parameters"]["testSuiteId"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteRun"][];
        };
      };
    };
  };
  /**
   * run TestSuite
   * @description run a particular TestSuite
   */
  runTestSuite: {
    parameters: {
      path: {
        testSuiteId: external["parameters.yaml"]["components"]["parameters"]["testSuiteId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["RunInformation"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteRun"];
        };
      };
    };
  };
  /**
   * Get a specific run from a particular TestSuite
   * @description Get a specific run from a particular TestSuite
   */
  getTestSuiteRun: {
    parameters: {
      path: {
        testSuiteId: external["parameters.yaml"]["components"]["parameters"]["testSuiteId"];
        runId: external["parameters.yaml"]["components"]["parameters"]["runId"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteRun"];
        };
      };
      /** @description TestSuite run not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete a specific run from a particular TestSuite
   * @description Delete a specific run from a particular TestSuite
   */
  deleteTestSuiteRun: {
    parameters: {
      path: {
        testSuiteId: external["parameters.yaml"]["components"]["parameters"]["testSuiteId"];
        runId: external["parameters.yaml"]["components"]["parameters"]["runId"];
      };
    };
    responses: {
      /** @description OK */
      204: {
        content: never;
      };
      /** @description TestSuite run not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get tests
   * @description get tests
   */
  getTests: {
    parameters: {
      query?: {
        take?: external["parameters.yaml"]["components"]["parameters"]["take"];
        skip?: external["parameters.yaml"]["components"]["parameters"]["skip"];
        query?: external["parameters.yaml"]["components"]["parameters"]["query"];
        sortBy?: external["parameters.yaml"]["components"]["parameters"]["runnableResourceSortBy"];
        sortDirection?: external["parameters.yaml"]["components"]["parameters"]["sortDirection"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestResourceList"];
          "text/yaml": external["tests.yaml"]["components"]["schemas"]["TestResourceList"];
        };
      };
      /** @description invalid query for test, some data was sent in incorrect format. */
      400: {
        content: never;
      };
      /** @description problem with getting tests */
      500: {
        content: never;
      };
    };
  };
  /**
   * Create new test
   * @description Create new test action
   */
  createTest: {
    requestBody?: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["Test"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["Test"];
        };
      };
      /** @description trying to create a test with an already existing ID */
      400: {
        content: never;
      };
    };
  };
  /**
   * update test
   * @description update test action
   */
  updateTest: {
    parameters: {
      path: {
        testId: external["parameters.yaml"]["components"]["parameters"]["testId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["Test"];
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        content: never;
      };
      /** @description problem with updating test */
      500: {
        content: never;
      };
    };
  };
  /**
   * delete a test
   * @description delete a test
   */
  deleteTest: {
    parameters: {
      path: {
        testId: external["parameters.yaml"]["components"]["parameters"]["testId"];
      };
    };
    responses: {
      /** @description OK */
      204: {
        content: never;
      };
    };
  };
  /**
   * get the runs for a test
   * @description get the runs from a particular test
   */
  getTestRuns: {
    parameters: {
      query?: {
        take?: external["parameters.yaml"]["components"]["parameters"]["take"];
        skip?: external["parameters.yaml"]["components"]["parameters"]["skip"];
      };
      path: {
        testId: external["parameters.yaml"]["components"]["parameters"]["testId"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          /** @description Total records count */
          "X-Total-Count"?: number;
        };
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"][];
        };
      };
    };
  };
  /**
   * run test
   * @description run a particular test
   */
  runTest: {
    parameters: {
      path: {
        testId: external["parameters.yaml"]["components"]["parameters"]["testId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["RunInformation"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
      };
      /** @description some variables are missing */
      422: {
        content: {
          "application/json": external["variables.yaml"]["components"]["schemas"]["MissingVariablesError"];
        };
      };
    };
  };
  /**
   * retrieve spans that will be selected by selector
   * @description get the spans ids that would be selected by a specific selector query
   */
  getTestResultSelectedSpans: {
    parameters: {
      query?: {
        query?: external["parameters.yaml"]["components"]["parameters"]["query"];
      };
      path: {
        testId: external["parameters.yaml"]["components"]["parameters"]["testId"];
        runId: external["parameters.yaml"]["components"]["parameters"]["runId"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["SelectedSpansResult"];
        };
      };
    };
  };
  /**
   * run given assertions against the traces from the given run without persisting anything
   * @description use this method to test a definition against an actual trace without creating a new version or persisting anything
   */
  dryRunAssertion: {
    parameters: {
      path: {
        testId: external["parameters.yaml"]["components"]["parameters"]["testId"];
        runId: external["parameters.yaml"]["components"]["parameters"]["runId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["TestSpecs"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["AssertionResults"];
        };
      };
    };
  };
  /**
   * rerun a test run
   * @description rerun a test run
   */
  rerunTestRun: {
    parameters: {
      path: {
        testId: external["parameters.yaml"]["components"]["parameters"]["testId"];
        runId: external["parameters.yaml"]["components"]["parameters"]["runId"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
      };
    };
  };
  /**
   * get test run results in JUnit xml format
   * @description get test run results in JUnit xml format
   */
  getRunResultJUnit: {
    parameters: {
      path: {
        testId: external["parameters.yaml"]["components"]["parameters"]["testId"];
        runId: external["parameters.yaml"]["components"]["parameters"]["runId"];
      };
    };
    responses: {
      /** @description JUnit formatted file */
      200: {
        content: {
          "application/xml": string;
        };
      };
    };
  };
  /**
   * export test and test run information
   * @description export test and test run information for debugging
   */
  exportTestRun: {
    parameters: {
      path: {
        testId: external["parameters.yaml"]["components"]["parameters"]["testId"];
        runId: external["parameters.yaml"]["components"]["parameters"]["runId"];
      };
    };
    responses: {
      /** @description successfuly exported test and test run information */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["ExportedTestInformation"];
        };
      };
    };
  };
  /**
   * import test and test run information
   * @description import test and test run information for debugging
   */
  importTestRun: {
    requestBody?: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["ExportedTestInformation"];
      };
    };
    responses: {
      /** @description successfuly imported test and test run information */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["ExportedTestInformation"];
        };
      };
    };
  };
  /**
   * get test Run
   * @description get a particular test Run
   */
  getTestRun: {
    parameters: {
      path: {
        testId: external["parameters.yaml"]["components"]["parameters"]["testId"];
        runId: external["parameters.yaml"]["components"]["parameters"]["runId"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
      };
    };
  };
  /**
   * delete a test run
   * @description delete a test run
   */
  deleteTestRun: {
    parameters: {
      path: {
        testId: external["parameters.yaml"]["components"]["parameters"]["testId"];
        runId: external["parameters.yaml"]["components"]["parameters"]["runId"];
      };
    };
    responses: {
      /** @description OK */
      204: {
        content: never;
      };
    };
  };
  /**
   * Get definition for a test
   * @description Gets definition for a test
   */
  getTestSpecs: {
    parameters: {
      path: {
        testId: external["parameters.yaml"]["components"]["parameters"]["testId"];
      };
    };
    responses: {
      /** @description successful operation */
      201: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestSpecs"][];
        };
      };
    };
  };
  /**
   * get a test specific version
   * @description get a test specific version
   */
  getTestVersion: {
    parameters: {
      path: {
        testId: external["parameters.yaml"]["components"]["parameters"]["testId"];
        version: external["parameters.yaml"]["components"]["parameters"]["version"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["Test"];
        };
      };
      /** @description problem with getting a test */
      500: {
        content: never;
      };
    };
  };
  /**
   * stops the execution of a test run
   * @description stops the execution of a test run
   */
  stopTestRun: {
    parameters: {
      path: {
        testId: external["parameters.yaml"]["components"]["parameters"]["testId"];
        runId: external["parameters.yaml"]["components"]["parameters"]["runId"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: never;
      };
      /** @description could not stop execution, probably it's not running anymore */
      422: {
        content: never;
      };
    };
  };
  /**
   * get events from a test run
   * @description get events from a test run
   */
  getTestRunEvents: {
    parameters: {
      path: {
        testId: external["parameters.yaml"]["components"]["parameters"]["testId"];
        runId: external["parameters.yaml"]["components"]["parameters"]["runId"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["testEvents.yaml"]["components"]["schemas"]["TestRunEvent"][];
        };
      };
    };
  };
  /**
   * resolves an expression and returns the result string
   * @description resolves an expression and returns the result string
   */
  ExpressionResolve: {
    requestBody?: {
      content: {
        "application/json": external["expressions.yaml"]["components"]["schemas"]["ResolveRequestInfo"];
      };
    };
    responses: {
      /** @description successfully resolved the expression */
      200: {
        content: {
          "application/json": external["expressions.yaml"]["components"]["schemas"]["ResolveResponseInfo"];
        };
      };
    };
  };
  /**
   * Get resources
   * @description get resources
   */
  getResources: {
    parameters: {
      query?: {
        take?: external["parameters.yaml"]["components"]["parameters"]["take"];
        skip?: external["parameters.yaml"]["components"]["parameters"]["skip"];
        query?: external["parameters.yaml"]["components"]["parameters"]["query"];
        sortBy?: external["parameters.yaml"]["components"]["parameters"]["runnableResourceSortBy"];
        sortDirection?: external["parameters.yaml"]["components"]["parameters"]["sortDirection"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          /** @description Total records count */
          "X-Total-Count"?: number;
        };
        content: {
          "application/json": external["resources.yaml"]["components"]["schemas"]["Resource"][];
        };
      };
    };
  };
  /**
   * Tests the config data store/exporter connection
   * @description Tests the config data store/exporter connection
   */
  testConnection: {
    requestBody?: {
      content: {
        "text/json": external["dataStores.yaml"]["components"]["schemas"]["DataStore"];
      };
    };
    responses: {
      /** @description Test connection Result */
      201: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["TestConnectionResponse"];
        };
      };
    };
  };
  /**
   * List Tracetest configuration
   * @description List Tracetest configuration
   */
  listConfiguration: {
    parameters: {
      query?: {
        take?: external["parameters.yaml"]["components"]["parameters"]["take"];
        skip?: external["parameters.yaml"]["components"]["parameters"]["skip"];
        sortBy?: external["parameters.yaml"]["components"]["parameters"]["switchableResourceSortBy"];
        sortDirection?: external["parameters.yaml"]["components"]["parameters"]["sortDirection"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["ConfigurationResourceList"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["ConfigurationResourceList"];
        };
      };
      /** @description problem getting the configuration list */
      500: {
        content: never;
      };
    };
  };
  /**
   * Get Tracetest configuration
   * @description Get Tracetest configuration
   */
  getConfiguration: {
    parameters: {
      path: {
        configId: external["parameters.yaml"]["components"]["parameters"]["configId"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
        };
      };
      /** @description problem getting a configuration */
      500: {
        content: never;
      };
    };
  };
  /**
   * Update Tracetest configuration
   * @description Update Tracetest configuration
   */
  updateConfiguration: {
    parameters: {
      path: {
        configId: external["parameters.yaml"]["components"]["parameters"]["configId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
        "text/yaml": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
        };
      };
      /** @description problem updating configuration */
      500: {
        content: never;
      };
    };
  };
  /**
   * List Polling Profile Configuration
   * @description List Polling Profile configuration
   */
  listPollingProfile: {
    parameters: {
      query?: {
        take?: external["parameters.yaml"]["components"]["parameters"]["take"];
        skip?: external["parameters.yaml"]["components"]["parameters"]["skip"];
        sortBy?: external["parameters.yaml"]["components"]["parameters"]["switchableResourceSortBy"];
        sortDirection?: external["parameters.yaml"]["components"]["parameters"]["sortDirection"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["PollingProfileList"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["PollingProfileList"];
        };
      };
      /** @description problem getting the polling profile list */
      500: {
        content: never;
      };
    };
  };
  /**
   * Get Polling Profile
   * @description Get a polling profile used on Tracetest to configure how to fetch traces in a test.
   */
  getPollingProfile: {
    parameters: {
      path: {
        pollingProfileId: external["parameters.yaml"]["components"]["parameters"]["pollingProfileId"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
        };
      };
      /** @description polling profile not found */
      404: {
        content: never;
      };
      /** @description problem getting a polling profile */
      500: {
        content: never;
      };
    };
  };
  /**
   * Update a Polling Profile
   * @description Update a polling profile used on Tracetest to configure how to fetch traces in a test.
   */
  updatePollingProfile: {
    parameters: {
      path: {
        pollingProfileId: external["parameters.yaml"]["components"]["parameters"]["pollingProfileId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
        "text/yaml": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
        };
      };
      /** @description invalid polling profile, some data was sent in incorrect format. */
      400: {
        content: never;
      };
      /** @description polling profile not found */
      404: {
        content: never;
      };
      /** @description problem updating a polling profile */
      500: {
        content: never;
      };
    };
  };
  /**
   * List Demonstrations
   * @description List demonstrations used on Tracetest as quick start examples.
   */
  listDemos: {
    parameters: {
      query?: {
        take?: external["parameters.yaml"]["components"]["parameters"]["take"];
        skip?: external["parameters.yaml"]["components"]["parameters"]["skip"];
        sortBy?: external["parameters.yaml"]["components"]["parameters"]["switchableResourceSortBy"];
        sortDirection?: external["parameters.yaml"]["components"]["parameters"]["sortDirection"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["DemoList"];
          "text/yaml": {
            count?: number;
            items?: external["config.yaml"]["components"]["schemas"]["Demo"][];
          };
        };
      };
      /** @description invalid query for demos, some data was sent in incorrect format. */
      400: {
        content: never;
      };
      /** @description problem listing demos */
      500: {
        content: never;
      };
    };
  };
  /**
   * Create a Demonstration setting
   * @description Create a demonstration used on Tracetest as quick start examples.
   */
  createDemo: {
    requestBody?: {
      content: {
        "application/json": external["config.yaml"]["components"]["schemas"]["Demo"];
        "text/yaml": external["config.yaml"]["components"]["schemas"]["Demo"];
      };
    };
    responses: {
      /** @description successful operation */
      201: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["Demo"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["Demo"];
        };
      };
      /** @description problem creating a demo */
      500: {
        content: never;
      };
    };
  };
  /**
   * Get Demonstration setting
   * @description Get a demonstration used on Tracetest as quick start examples.
   */
  getDemo: {
    parameters: {
      path: {
        demoId: external["parameters.yaml"]["components"]["parameters"]["demoId"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["Demo"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["Demo"];
        };
      };
      /** @description demo not found */
      404: {
        content: never;
      };
      /** @description problem getting a demo */
      500: {
        content: never;
      };
    };
  };
  /**
   * Update a Demonstration setting
   * @description Update a demonstration used on Tracetest as quick start examples.
   */
  updateDemo: {
    parameters: {
      path: {
        demoId: external["parameters.yaml"]["components"]["parameters"]["demoId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": external["config.yaml"]["components"]["schemas"]["Demo"];
        "text/yaml": external["config.yaml"]["components"]["schemas"]["Demo"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["Demo"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["Demo"];
        };
      };
      /** @description invalid demo, some data was sent in incorrect format. */
      400: {
        content: never;
      };
      /** @description demo not found */
      404: {
        content: never;
      };
      /** @description problem updating a demo */
      500: {
        content: never;
      };
    };
  };
  /**
   * Delete a Demonstration setting
   * @description Delete a demonstration used on Tracetest as quick start examples.
   */
  deleteDemo: {
    parameters: {
      path: {
        demoId: external["parameters.yaml"]["components"]["parameters"]["demoId"];
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        content: never;
      };
      /** @description invalid demo, some data was sent in incorrect format. */
      400: {
        content: never;
      };
      /** @description demo not found */
      404: {
        content: never;
      };
      /** @description problem deleting a demo */
      500: {
        content: never;
      };
    };
  };
  /**
   * List Data Store
   * @description List Data Store
   */
  listDataStore: {
    parameters: {
      query?: {
        take?: external["parameters.yaml"]["components"]["parameters"]["take"];
        skip?: external["parameters.yaml"]["components"]["parameters"]["skip"];
        sortBy?: external["parameters.yaml"]["components"]["parameters"]["switchableResourceSortBy"];
        sortDirection?: external["parameters.yaml"]["components"]["parameters"]["sortDirection"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["dataStores.yaml"]["components"]["schemas"]["DataStoreList"];
          "text/yaml": external["dataStores.yaml"]["components"]["schemas"]["DataStoreList"];
        };
      };
      /** @description problem getting the data store list */
      500: {
        content: never;
      };
    };
  };
  /**
   * Get a Data Store
   * @description Get a Data Store
   */
  getDataStore: {
    parameters: {
      path: {
        dataStoreId: external["parameters.yaml"]["components"]["parameters"]["dataStoreId"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["dataStores.yaml"]["components"]["schemas"]["DataStoreResource"];
        };
      };
      /** @description data store not found */
      404: {
        content: never;
      };
      /** @description problem with getting a data store */
      500: {
        content: never;
      };
    };
  };
  /**
   * Update a Data Store
   * @description Update a Data Store
   */
  updateDataStore: {
    parameters: {
      path: {
        dataStoreId: external["parameters.yaml"]["components"]["parameters"]["dataStoreId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": external["dataStores.yaml"]["components"]["schemas"]["DataStore"];
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        content: never;
      };
      /** @description invalid data store, some data was sent in incorrect format. */
      400: {
        content: never;
      };
      /** @description problem with updating data store */
      500: {
        content: never;
      };
    };
  };
  /**
   * Delete a Data Store
   * @description Delete a Data Store
   */
  deleteDataStore: {
    parameters: {
      path: {
        dataStoreId: external["parameters.yaml"]["components"]["parameters"]["dataStoreId"];
      };
    };
    responses: {
      /** @description OK */
      204: {
        content: never;
      };
    };
  };
  /**
   * List VariableSets
   * @description List VariableSets available in Tracetest.
   */
  listVariableSets: {
    parameters: {
      query?: {
        take?: external["parameters.yaml"]["components"]["parameters"]["take"];
        skip?: external["parameters.yaml"]["components"]["parameters"]["skip"];
        sortBy?: external["parameters.yaml"]["components"]["parameters"]["switchableResourceSortBy"];
        sortDirection?: external["parameters.yaml"]["components"]["parameters"]["sortDirection"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResourceList"];
          "text/yaml": {
            count?: number;
            items?: external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"][];
          };
        };
      };
      /** @description invalid query for VariableSets, some data was sent in incorrect format. */
      400: {
        content: never;
      };
      /** @description problem listing VariableSets */
      500: {
        content: never;
      };
    };
  };
  /**
   * Create a VariableSet
   * @description Create a VariableSet that can be used by tests and test suites
   */
  createVariableSet: {
    requestBody?: {
      content: {
        "application/json": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
        "text/yaml": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
      };
    };
    responses: {
      /** @description successful operation */
      201: {
        content: {
          "application/json": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
          "text/yaml": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
        };
      };
      /** @description problem creating an VariableSet */
      500: {
        content: never;
      };
    };
  };
  /**
   * Get a specific VariableSet
   * @description Get one VariableSet by its id
   */
  getVariableSet: {
    parameters: {
      path: {
        variableSetId: external["parameters.yaml"]["components"]["parameters"]["variableSetId"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
          "text/yaml": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
        };
      };
      /** @description VariableSet not found */
      404: {
        content: never;
      };
      /** @description problem getting an VariableSet */
      500: {
        content: never;
      };
    };
  };
  /**
   * Update a VariableSet
   * @description Update a VariableSet used on Tracetest
   */
  updateVariableSet: {
    parameters: {
      path: {
        variableSetId: external["parameters.yaml"]["components"]["parameters"]["variableSetId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
        "text/yaml": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
          "text/yaml": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
        };
      };
      /** @description invalid VariableSet, some data was sent in incorrect format. */
      400: {
        content: never;
      };
      /** @description VariableSet not found */
      404: {
        content: never;
      };
      /** @description problem updating an VariableSet */
      500: {
        content: never;
      };
    };
  };
  /**
   * Delete a variable set
   * @description Delete a variable set from Tracetest
   */
  deleteVariableSet: {
    parameters: {
      path: {
        variableSetId: external["parameters.yaml"]["components"]["parameters"]["variableSetId"];
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        content: never;
      };
      /** @description invalid VariableSet, some data was sent in incorrect format. */
      400: {
        content: never;
      };
      /** @description VariableSet not found */
      404: {
        content: never;
      };
      /** @description problem deleting an variable set */
      500: {
        content: never;
      };
    };
  };
  /**
   * Get the version of the API
   * @description Get the version of the API
   */
  getVersion: {
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["version.yaml"]["components"]["schemas"]["Version"];
        };
      };
      /** @description problem getting the version of the API */
      500: {
        content: never;
      };
    };
  };
  /**
   * List Linters
   * @description List Linters available in Tracetest.
   */
  listLinters: {
    parameters: {
      query?: {
        take?: external["parameters.yaml"]["components"]["parameters"]["take"];
        skip?: external["parameters.yaml"]["components"]["parameters"]["skip"];
        sortBy?: external["parameters.yaml"]["components"]["parameters"]["switchableResourceSortBy"];
        sortDirection?: external["parameters.yaml"]["components"]["parameters"]["sortDirection"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["linters.yaml"]["components"]["schemas"]["LinterResourceList"];
          "text/yaml": external["linters.yaml"]["components"]["schemas"]["LinterResourceList"];
        };
      };
      /** @description invalid query for Linters, some data was sent in incorrect format. */
      400: {
        content: never;
      };
      /** @description problem listing Linters */
      500: {
        content: never;
      };
    };
  };
  /**
   * Create an Linter
   * @description Create an Linter that can be used by tests and Linters
   */
  createLinter: {
    requestBody?: {
      content: {
        "application/json": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
        "text/yaml": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
      };
    };
    responses: {
      /** @description successful operation */
      201: {
        content: {
          "application/json": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
          "text/yaml": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
        };
      };
      /** @description problem creating an Linter */
      500: {
        content: never;
      };
    };
  };
  /**
   * Get a specific Linter
   * @description Get one Linter by its id
   */
  getLinter: {
    parameters: {
      path: {
        LinterId: external["parameters.yaml"]["components"]["parameters"]["LinterId"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
          "text/yaml": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
        };
      };
      /** @description Linter not found */
      404: {
        content: never;
      };
      /** @description problem getting a Linter */
      500: {
        content: never;
      };
    };
  };
  /**
   * Update a Linter
   * @description Update a Linter used on Tracetest
   */
  updateLinter: {
    parameters: {
      path: {
        LinterId: external["parameters.yaml"]["components"]["parameters"]["LinterId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
        "text/yaml": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
          "text/yaml": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
        };
      };
      /** @description invalid Linter, some data was sent in incorrect format. */
      400: {
        content: never;
      };
      /** @description Linter not found */
      404: {
        content: never;
      };
      /** @description problem updating an Linter */
      500: {
        content: never;
      };
    };
  };
  /**
   * Delete an Linter
   * @description Delete an Linter from Tracetest
   */
  deleteLinter: {
    parameters: {
      path: {
        LinterId: external["parameters.yaml"]["components"]["parameters"]["LinterId"];
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        content: never;
      };
      /** @description invalid Linter, some data was sent in incorrect format. */
      400: {
        content: never;
      };
      /** @description Linter not found */
      404: {
        content: never;
      };
      /** @description problem deleting an Linter */
      500: {
        content: never;
      };
    };
  };
}
